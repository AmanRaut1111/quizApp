const jwt = require("jsonwebtoken");
const userSchema = require('../models/user');
const adminSchema = require('../models/admin')
require("dotenv").config();

// const isValidToken = (req, res, next) => {
//     try {
//         let token = req.headers.authorization;

//         if (token) {
//             token = token.split(" ")[1];

//             const user = jwt.verify(token, process.env.SECRET_KEY);
//         } else {
//             return res
//                 .status(400)
//                 .json({
//                     messag: "unauthorized User...!",
//                     status: false,
//                     statusCode: 400,
//                 });
//         }

//         next();
//     } catch (error) {
//         console.log(error);
//         return res
//             .status(500)
//             .json({ messag: "unauthorized..!", status: false, statusCode: 500 });
//     }
// };




const isValidToken = async (req, res, next) => {
    if (req.headers.authorization) {
        const token = req.headers.authorization.split(" ")[1];
        try {
            const decode = await jwt.verify(token, process.env.SECRET_KEY);

            const user = await userSchema.findOne({
                _id: decode._id
            }).catch((error) => {
                console.log('error :', error);
                return false;
            });

            const admin = await adminSchema.findOne({
                _id: decode._id
            }).catch((error) => {
                console.log('error :', error);
                return false;
            });

            if (user) {
                req['AuthenticateUser'] = user;
                next();
            } else if (admin) {
                req['AuthenticateUser'] = admin;
                next();
            }
            else
                return res.status(401).json({ status: false, statusCode: 401, message: "Unauthorized! Please login" });
        } catch (error) {
            console.log('error :', error);
            return res.status(401).json({
                status: false,
                msg: "Unauthorized! Please login",
            });
        }
    }
    else {
        return res.status(401).json({
            status: false,
            msg: "Unauthorized! Please login",
        });
    }
}

module.exports = isValidToken;
